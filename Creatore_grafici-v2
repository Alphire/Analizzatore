import csv
import math
import os
import os.path
import random
import select
import matplotlib.artist
import pandas as pd
import matplotlib.pyplot as plt
import mplcursors
plt.rcParams["toolbar"] = "toolmanager"
from matplotlib.widgets import Slider, Button, RadioButtons
from matplotlib.backend_tools import ToolBase, ToolToggleBase
import numpy as np
import  time
from sklearn.linear_model import BayesianRidge
from colorama import init ,Fore, Back, Style
init()

sliders = []

nome_mesi = ['Gennaio',
        'Febbraio',
        'Marzo',
        'Aprile',
        'Maggio',
        'Giugno',
        'Luglio',
        'Agosto',
        'Settembre',
        'Ottobre',
        'Novembre',
        'Dicembre']


'''Settings per i colori dell'output'''
class bcolors:
    HEADER = Fore.LIGHTYELLOW_EX
    OKBLUE = Fore.BLUE
    OKCYAN = Fore.CYAN
    OKGREEN = Fore.GREEN
    WARNING = Fore.LIGHTYELLOW_EX
    FAIL = Fore.RED
    ENDC = Style.RESET_ALL


def versione(num, giorno):
    print(Back.WHITE + Fore.BLACK + f"Versione {num} --- Del giorno : {giorno}" + Style.RESET_ALL)
    print(Back.LIGHTWHITE_EX + Fore.BLACK + "Di Alberto Bonetti" + Style.RESET_ALL)


''' Trasforma la data inglese nel formato italiano '''
def trasformaData(data_originale):
    data = data_originale[:10]
    giorno = data[-2:]
    mese = data[-5:-3]
    anno = data[:4]
    data_finale = giorno + '-' + mese + '-' + anno + data_originale[-9:]
    return data_finale


'''Dividi file csv in anni'''
def dividi_in_anni(dati, targa):
    divisione_anni = []
    tmp = []
    anno_base = dati[0][0][:4]
    for i in range(len(dati)):
        if dati[i][0][:4] != anno_base:
            divisione_anni.append(tmp)
            tmp = []
            tmp.append(dati[i])
            anno_base = dati[i][0][:4]
        else:
            tmp.append(dati[i])
    for i in range(len(divisione_anni)):
        f = open(targa+f' - {divisione_anni[i][0][0][:4]}.csv', 'w', newline='')
        scrittore = csv.writer(f)
        for z in range(len(divisione_anni[i])):
            if z == 0:
                scrittore.writerow(["Data", "Misura"])
            scrittore.writerow(divisione_anni[i][z])
    f.close()


'''Metodo per aprire i file csv'''
def apri_file_csv(nome_file):
    '''Controlla che esiste il file nella cartella locale'''
    if os.path.isfile(nome_file) == True:
        nome_file = str(nome_file)
        #Prendi la targhetta per sapere il nome della variabile
        label = nome_file.removesuffix(".csv")
        print(Back.BLUE + "In apertura di %s" %nome_file + Style.RESET_ALL)
        with open(nome_file, newline='') as file_csv:
            lettore_csv = csv.reader(file_csv, delimiter=',')
            next(lettore_csv, None)
            arr = []
            for row in lettore_csv:
                arr.append(row)
            print(bcolors.OKCYAN + "Dimensionalità del file: %i punti" %len(arr) + bcolors.ENDC)
            giorni = int(len(arr)/24)
            print(bcolors.OKCYAN + "Tradotto in giorni --> circa %i" %giorni + "gg" + bcolors.ENDC)
            print(Back.WHITE + "-" * 100 + Style.RESET_ALL)
            return arr, label
    else:
        print(bcolors.FAIL + "Non sembra esserci alcun file il nome: '%s" %nome_file + "'" +  bcolors.ENDC)
        print(bcolors.WARNING + "Ricorda di inserire il nome completo del file, compreso il '.csv'" + bcolors.ENDC)
        exit()


def confronta_tempi(arr):
    '''Controllo delle dimensioni'''
    flag_err_date, flag_err_dim = False, False
    for i in range(len(arr)):
        try:
            if len(arr[i]) == len(arr[i+1]):
                pass
            else:
                flag_err_dim = True
        except:
            pass
    '''Controllo delle date'''
    for i in range(len(arr)):
        for z in range(len(arr[0])):
            try:
                if arr[i][z][0] == arr[i+1][z][0]:
                    pass
                else:
                    flag_err_date = True
            except:
                pass
    if flag_err_date == True:
        print(bcolors.FAIL + "Errore: Le date non corrispondono" + bcolors.ENDC)
    if flag_err_dim == True:
        print(bcolors.FAIL + "Errore: Dimensioni non rispettate fra i file csv" + bcolors.ENDC)


def confronta_dim(*arr):
    for i in range(len(arr)):
        if (i + 1) < len(arr):
            if len(arr[i]) == len(arr[i+1]):
                pass
            else:
                print(bcolors.FAIL + f"Errore: Dimensionalità non corrisponde"
                                     f"\nDimensioni discordanti --> {len(arr[i])} != {len(arr[i+1])}" + bcolors.ENDC)


def estraiDati(serie):
    colonna = []
    for i in range(len(serie)):
        try:
            if serie[i][1] == '':
                colonna.append(float(0))
            else:
                colonna.append(float(serie[i][1]))
        except:
            colonna.append(float(0))
    return colonna


def estraiGiorni(serie):
    colonna = []
    for i in range(len(serie)):
        colonna.append(str(serie[i][0]))
    return colonna


# TODO: Aggiungere funzione che isola girono per giorno.
def confrontaSerieMultiple(serie, labels_dati):
    # Estrazione dati e creazione matrice
    colonne, nome_colonne = [], []
    for i in range(len(serie)):
        colonne.append(estraiDati(serie[i]))
        colonne.append(estraiGiorni(serie[i]))
    matrice = pd.DataFrame(colonne).transpose()
    for i in range(len(labels_dati)):
        nome_colonne.append(labels_dati[i])
        nome_colonne.append('Data di ' + str(labels_dati[i]))
    matrice.columns = nome_colonne

    # Scelta dei dati da plottare
    for i in range(len(labels_dati)):
        print(bcolors.HEADER + "#" + str(i + 1) + f" = {labels_dati[i]}" + bcolors.ENDC)
    print(Style.RESET_ALL)
    scelta_num_confronti = int(input(bcolors.HEADER + "Quante serie vuoi inserire? 2 o 3? " +bcolors.ENDC))
    scelta_x1 = str(input(
        bcolors.HEADER + "SETTAGGIO DI X1 --> Inserisci il numero identificativo del set di dati da utilizzare: "
        + bcolors.ENDC))
    scelta_y1 = str(input(
        bcolors.HEADER + "SETTAGGIO DI Y1 --> Inserisci il numero identificativo del set di dati da utilizzare: "
        + bcolors.ENDC))
    scelta_x2 = str(input(
        bcolors.HEADER + "SETTAGGIO DI X2 --> Inserisci il numero identificativo del set di dati da utilizzare: "
        + bcolors.ENDC))
    scelta_y2 = str(input(
        bcolors.HEADER + "SETTAGGIO DI Y2 --> Inserisci il numero identificativo del set di dati da utilizzare: "
        + bcolors.ENDC))
    if scelta_num_confronti == 3:
        scelta_x3 = str(input(
            bcolors.HEADER + "SETTAGGIO DI X3 --> Inserisci il numero identificativo del set di dati da utilizzare: "
            + bcolors.ENDC))
        scelta_y3 = str(input(
            bcolors.HEADER + "SETTAGGIO DI Y3 --> Inserisci il numero identificativo del set di dati da utilizzare: "
            + bcolors.ENDC))

    # Treshold utilizzato per impostare i dati a nan al di sotto della suddetta
    treshold = float(input(bcolors.HEADER + "Soglia usata per eliminare i punti al di sotto di un certo valore di x: "
                           + bcolors.ENDC))
    if int(scelta_x1)-1 >= 0 and int(scelta_x1)-1 <= len(labels_dati):
        scelta_x1 = labels_dati[int(scelta_x1)-1]
    if int(scelta_x2) - 1 >= 0 and int(scelta_x2) - 1 <= len(labels_dati):
        scelta_x2 = labels_dati[int(scelta_x2)-1]
    if scelta_num_confronti == 3:
        if int(scelta_x3) - 1 >= 0 and int(scelta_x3) - 1 <= len(labels_dati):
            scelta_x3 = labels_dati[int(scelta_x3)-1]
        if int(scelta_y3) - 1 >= 0 and int(scelta_y3) - 1 <= len(labels_dati):
            scelta_y3 = labels_dati[int(scelta_y3)-1]
    if int(scelta_y1)-1 >= 0 and int(scelta_y1)-1 <= len(labels_dati):
        scelta_y1 = labels_dati[int(scelta_y1)-1]
    if int(scelta_y2)-1 >= 0 and int(scelta_y2)-1 <= len(labels_dati):
        scelta_y2 = labels_dati[int(scelta_y2)-1]

    # Elimina dalla matrice i valori al di sotto del treshold
    indexNames = matrice[matrice[scelta_x1] <= treshold].index
    matrice.loc[indexNames,scelta_y1] = np.nan
    indexNames = matrice[matrice[scelta_x2] <= treshold].index
    matrice.loc[indexNames, scelta_y2] = np.nan
    if scelta_num_confronti == 3:
        indexNames = matrice[matrice[scelta_x3] <= treshold].index
        matrice.loc[indexNames, scelta_y3] = np.nan

    righe = 3
    colonne = 4
    start_serie1 = 0
    start_serie2 = 0
    start_serie3 = 0
    mese = 2
    contatore = 0
    mese_corrente = '02-01 00:00:00' # 2019-01-01 00:00:00
    fig, ax = plt.subplots(righe, colonne, sharex=True, sharey=True, constrained_layout=True)

    artisti = []
    tmp_serie1, tmp_serie2, tmp_serie3 = [], [], []
    for r in range(righe):
        for c in range(colonne):
            anno_corrente_serie1 = matrice['Data di ' + scelta_x1][0][:4]
            anno_corrente_serie2 = matrice['Data di ' + scelta_x2][0][:4]
            if scelta_num_confronti == 3:
                anno_corrente_serie3 = matrice['Data di ' + scelta_x3][0][:4]
            try:
                indici_mese_corrente_serie1 = matrice[
                    matrice['Data di ' + scelta_x1] == anno_corrente_serie1 + '-' + mese_corrente].index[0]
            except:
                indici_mese_corrente_serie1 = -1
            try:
                indici_mese_corrente_serie2 = matrice[
                    matrice['Data di ' + scelta_x2] == anno_corrente_serie2 + '-' + mese_corrente].index[0]
            except:
                indici_mese_corrente_serie2 = -1

            if scelta_num_confronti == 3:
                try:
                    indici_mese_corrente_serie3 = matrice[
                        matrice['Data di ' + scelta_x3] == anno_corrente_serie3 + '-' + mese_corrente].index[0]
                except:
                    indici_mese_corrente_serie3 = -1

            ax[r][c].scatter(matrice[scelta_x1][start_serie1:indici_mese_corrente_serie1],
                             matrice[scelta_y1][start_serie1:indici_mese_corrente_serie1], alpha=0.4, marker='.')
            ax[r][c].scatter(matrice[scelta_x2][start_serie2:indici_mese_corrente_serie2],
                             matrice[scelta_y2][start_serie2:indici_mese_corrente_serie2], alpha=0.4, marker='.')
            if scelta_num_confronti == 3:
                ax[r][c].scatter(matrice[scelta_x3][start_serie3:indici_mese_corrente_serie3],
                                 matrice[scelta_y3][start_serie3:indici_mese_corrente_serie3], alpha=0.4, marker='.')
            ax[r][c].grid()
            ax[r][c].set_title(nome_mesi[contatore])
            contatore += 1
            artisti.append(ax[r][c].collections)
            tmp_serie1.append(start_serie1)
            tmp_serie2.append(start_serie2)
            if scelta_num_confronti == 3:
                tmp_serie3.append(start_serie3)

            #artisti.append(ax[r][c].collections)
            start_serie1 = indici_mese_corrente_serie1
            start_serie2 = indici_mese_corrente_serie2
            if scelta_num_confronti == 3:
                start_serie3 = indici_mese_corrente_serie3
            mese = mese + 1
            if mese < 10:
                mese_corrente = '0' + str(mese) + '-01 00:00:00'
            else:
                mese_corrente = str(mese) + '-01 00:00:00'

    ''' Preparazione per le annotazioni '''
    # Finale è la matrice che contiene gli indici finali di ogni mese per la serie con la relativa collezione
    # sel.artist = collezione
    finale_serie_1 = pd.DataFrame(tmp_serie1).transpose()
    finale_serie_2 = pd.DataFrame(tmp_serie2).transpose()
    finale_serie_3 = pd.DataFrame(tmp_serie3).transpose()
    artisti_serie1, artisti_serie2, artisti_serie3 = [], [], []
    for i in range(len(artisti)):
        artisti_serie1.append(artisti[i][0])
        artisti_serie2.append(artisti[i][1])
        if scelta_num_confronti == 3:
            artisti_serie3.append(artisti[i][2])

    finale_serie_1.columns = artisti_serie1
    finale_serie_2.columns = artisti_serie2
    if scelta_num_confronti == 3:
        finale_serie_3.columns = artisti_serie3


    ''' Per aggiungere le annotazioni ai punti delle serie '''
    def connessione_serie(sel):
        finali_serie = [finale_serie_1,finale_serie_2]
        if scelta_num_confronti == 3:
            finali_serie.append(finale_serie_3)
        for i in range(len(finali_serie)):
            try:
                if finali_serie[i][sel.artist].any() == True:
                    serie_selezionata = i
            except:
                pass

        if serie_selezionata == 0:
            sel.annotation.get_bbox_patch().set(fc="blue")
            sel.annotation.set_text(
                f'Data: {trasformaData(matrice["Data di " + scelta_y1][sel.index + finale_serie_1[sel.artist][0]])[:10]} ore:'
                f'{trasformaData(matrice["Data di " + scelta_y1][sel.index + finale_serie_1[sel.artist][0]])[-8:-3]}\n'
                f'x: {matrice[scelta_x1][sel.index + finale_serie_1[sel.artist][0]]}  y: {matrice[scelta_y1][sel.index + finale_serie_1[sel.artist][0]]}'
            )
        elif serie_selezionata == 1:
            sel.annotation.get_bbox_patch().set(fc="orange")
            sel.annotation.set_text(
                f'Data: {trasformaData(matrice["Data di " + scelta_y2][sel.index + finale_serie_2[sel.artist][0]])[:10]} ore:'
                f'{trasformaData(matrice["Data di " + scelta_y2][sel.index + finale_serie_2[sel.artist][0]])[-8:-3]}\n'
                f'x: {matrice[scelta_x2][sel.index + finale_serie_2[sel.artist][0]]}  y: {matrice[scelta_y2][sel.index + finale_serie_2[sel.artist][0]]}'
            )
        elif serie_selezionata == 2:
            sel.annotation.get_bbox_patch().set(fc="green")
            sel.annotation.set_text(
                f'Data: {trasformaData(matrice["Data di " + scelta_y3][sel.index + finale_serie_3[sel.artist][0]])[:10]} ore:'
                f'{trasformaData(matrice["Data di " + scelta_y3][sel.index + finale_serie_3[sel.artist][0]])[-8:-3]}\n'
                f'x: {matrice[scelta_x3][sel.index + finale_serie_3[sel.artist][0]]}  y: {matrice[scelta_y3][sel.index + finale_serie_3[sel.artist][0]]}'
            )

    annotazioni_principali = mplcursors.cursor(fig)
    annotazioni_principali.connect("add", lambda  sel: connessione_serie(sel))



    def ispezionaAzione(event):
        # Preparazione dati ed indici per il grafico
        collezzioni_presenti = event.inaxes.collections
        start_serie1 = finale_serie_1[collezzioni_presenti[0]][0]
        start_serie2 = finale_serie_2[collezzioni_presenti[1]][0]
        if scelta_num_confronti == 3:
            start_serie3 = finale_serie_3[collezzioni_presenti[2]][0]
        try:
            nome_colonna_fine_serie1 = finale_serie_1.columns[finale_serie_1.columns.get_loc(collezzioni_presenti[0])+1]
            fine_serie_1 = finale_serie_1[nome_colonna_fine_serie1][0]
        except:
            fine_serie_1 = -1
        try:
            nome_colonna_fine_serie2 = finale_serie_2.columns[finale_serie_2.columns.get_loc(collezzioni_presenti[1])+1]
            fine_serie_2 = finale_serie_2[nome_colonna_fine_serie2][0]
        except:
            fine_serie_2 = -1
        if scelta_num_confronti == 3:
            try:
                nome_colonna_fine_serie3 = finale_serie_3.columns[
                    finale_serie_3.columns.get_loc(collezzioni_presenti[2]) + 1]
                fine_serie_3 = finale_serie_3[nome_colonna_fine_serie3][0]
            except:
                fine_serie_3 = -1
        # DIsegna il grafico
        fig, zoom_graf = plt.subplots(1, 1, sharex=True, sharey=True)
        zoom_graf.scatter(matrice[scelta_x1][start_serie1:fine_serie_1], matrice[scelta_y1][start_serie1:fine_serie_1],
                          alpha=0.4, marker='.')
        zoom_graf.scatter(matrice[scelta_x2][start_serie2:fine_serie_2], matrice[scelta_y2][start_serie2:fine_serie_2],
                          alpha=0.4, marker='.')

        if scelta_num_confronti == 3:
            zoom_graf.scatter(matrice[scelta_x3][start_serie3:fine_serie_3],
                              matrice[scelta_y3][start_serie3:fine_serie_3],
                              alpha=0.4, marker='.')

        # TODO: slider per la scelta della data.
        plt.subplots_adjust(bottom=0.25)
        ax_slider_serie1 = plt.axes([0.25, 0.1, 0.65, 0.03])
        if fine_serie_1 != -1:
            slider_controllo_data_serie1 = Slider(ax=ax_slider_serie1, label='Scelta data',
                                           valmin=0,
                                           valmax=int(trasformaData(matrice["Data di " + scelta_y1][fine_serie_1 - 1])[:2]),
                                           valinit=0,
                                           valstep=1)
        # Per dicembre
        else:
            slider_controllo_data_serie1 = Slider(ax=ax_slider_serie1, label='Scelta data',
                                                  valmin=0,
                                                  valmax=int(31),
                                                  valinit=0,
                                                  valstep=1)
        # Altrimenti non reagisce al mouse
        sliders.append(slider_controllo_data_serie1)
        linee_serie_1, linee_serie_2, linee_serie_3 = [],[],[]

        def linee_dati_giornalieri(val):
            # TOFIX: se cambia il valore dello slider troppo velocemente le linee non si aggiornano correttamente
            # NOTA: credo che sia meglio cambiare il modo in cui elimino le linee.
            if val == 0:
                # Per non visualizzare le linee dei giorni se il giorno selezionato è 0
                linea_giorno_serie1 = zoom_graf.plot([],[])
                linea_giorno_serie2 = zoom_graf.plot([],[])
                linea_giorno_serie3 = zoom_graf.plot([],[])
                fig.canvas.draw()
            else:
                #print(matrice['Data di ' + scelta_y1][start_serie1 + ((val-1)*24) : start_serie1 + ((val-1)*24) + 24])
                linea_giorno_serie1 = zoom_graf.plot(matrice[scelta_x1][start_serie1 + ((val-1)*24) : start_serie1 + ((val-1)*24) + 24],
                               matrice[scelta_y1][start_serie1 + ((val-1)*24) : start_serie1 + ((val-1)*24) + 24],
                               c='blue')
                linea_giorno_serie2 = zoom_graf.plot(
                    matrice[scelta_x2][start_serie2 + ((val - 1) * 24): start_serie2 + ((val - 1) * 24) + 24],
                    matrice[scelta_y2][start_serie2 + ((val - 1) * 24): start_serie2 + ((val - 1) * 24) + 24],
                    c='orange')
            if scelta_num_confronti == 3:
                linea_giorno_serie3 = zoom_graf.plot(
                    matrice[scelta_x3][start_serie3 + ((val - 1) * 24): start_serie3 + ((val - 1) * 24) + 24],
                    matrice[scelta_y3][start_serie3 + ((val - 1) * 24): start_serie3 + ((val - 1) * 24) + 24],
                    c='green')
            if len(linee_serie_1)!=0:
                linee_serie_1[0].pop(0).remove
                linee_serie_1.pop(0)
                zoom_graf.lines.pop(0)
            if len(linee_serie_2)!=0:
                linee_serie_2[0].pop(0).remove
                linee_serie_2.pop(0)
                zoom_graf.lines.pop(0)
            if scelta_num_confronti == 3:
                if len(linee_serie_3)!=0:
                    linee_serie_3[0].pop(0).remove
                    linee_serie_3.pop(0)
                    zoom_graf.lines.pop(0)
            linee_serie_1.append(linea_giorno_serie1)
            linee_serie_2.append(linea_giorno_serie2)
            if scelta_num_confronti == 3:
                linee_serie_3.append(linea_giorno_serie3)
            # Per debuggare
            #print(f'valore: {val}\n{matrice["Data di " + scelta_y1][start_serie1 + ((val-1)*24) : start_serie1 + ((val-1)*24) + 24]}')
            fig.canvas.draw()
            #fig.canvas.draw_idle()

        slider_controllo_data_serie1.on_changed(linee_dati_giornalieri)
        ''''''

        # Per visualizzare il mese come titolo grafico
        mese_selezionato = matrice['Data di ' + scelta_x1][start_serie1][5:7]
        for i in range(len(nome_mesi)):
            if int(mese_selezionato) - 1 == i:
                mese_titolo = nome_mesi[i]


        zoom_graf.set_title(mese_titolo)
        zoom_graf.grid()

        def connessione_serie_graf_zoom(sel):
            if sel.artist == zoom_graf.collections[0]:
                sel.annotation.get_bbox_patch().set(fc="blue")
                sel.annotation.set_text(
                    f'Data: {trasformaData(matrice["Data di " + scelta_y1][sel.index + start_serie1])[:10]} ore:'
                    f'{trasformaData(matrice["Data di " + scelta_y1][sel.index + start_serie1])[-8:-3]}\n'
                    f'x: {matrice[scelta_x1][sel.index + start_serie1]}  y: {matrice[scelta_y1][sel.index + start_serie1]}'
                )
            elif sel.artist == zoom_graf.collections[1]:
                sel.annotation.get_bbox_patch().set(fc="orange")
                sel.annotation.set_text(
                    f'Data: {trasformaData(matrice["Data di " + scelta_y2][sel.index + start_serie2])[:10]} ore:'
                    f'{trasformaData(matrice["Data di " + scelta_y2][sel.index + start_serie2])[-8:-3]}\n'
                    f'x: {matrice[scelta_x2][sel.index + start_serie2]}  y: {matrice[scelta_y2][sel.index + start_serie2]}'
                )
            if scelta_num_confronti == 3:
                if sel.artist == zoom_graf.collections[2]:
                    sel.annotation.get_bbox_patch().set(fc="green")
                    sel.annotation.set_text(
                        f'Data: {trasformaData(matrice["Data di " + scelta_y3][sel.index + start_serie3])[:10]} ore:'
                        f'{trasformaData(matrice["Data di " + scelta_y3][sel.index + start_serie3])[-8:-3]}\n'
                        f'x: {matrice[scelta_x3][sel.index + start_serie3]}  y: {matrice[scelta_y3][sel.index + start_serie3]}'
                    )

        annotazioni_graf_zoom = mplcursors.cursor(zoom_graf)
        annotazioni_graf_zoom.connect(
            "add", lambda sel: connessione_serie_graf_zoom(sel)
        )

        plt.show()


    # Classe per il pulsante custom ispeziona
    class PulsanteIspeziona(ToolToggleBase):
        image = r"ispeziona.png"
        description = 'Seleziona un grafico da isolare'
        default_toggled = False

        def enable(self, event=None):
            self.mouse_clikkato_id = fig.canvas.mpl_connect('button_press_event', ispezionaAzione)

        def disable(self, event=None):
            fig.canvas.mpl_disconnect(self.mouse_clikkato_id)


    # Toolmanager, inserisci il botone
    tm = fig.canvas.manager.toolmanager
    tm.add_tool("ispeziona", PulsanteIspeziona)
    fig.canvas.manager.toolbar.add_tool(tm.get_tool("ispeziona"), "toolgroup")

    plt.show()


'''Inserisci tutti i file .csv presenti nella cartella del programma'''
def autoInserimentoDati():
    nome_files = []
    for file in os.listdir():
        if file[-3:] == "csv":
            nome_files.append(file)
        else:
            pass
    return nome_files


def starter(autoinserimento):
    flag_inserisci_file = 0
    dati = []
    labels_dati = []
    #Inserimento dei file
    if autoinserimento == 1:
        files = autoInserimentoDati()
        print(bcolors.WARNING + str(files) + bcolors.ENDC)
        for i in range(len(files)):
            a = apri_file_csv(files[i])
            dati.append(a[0])
            labels_dati.append(a[1])
    else:
        print(bcolors.WARNING + "Inserisici per primo il dataset di riferimento (quello comune a tutti)" + bcolors.ENDC)
        while flag_inserisci_file == 0:
            nom_file = input("Nome del file da aprire: ")
            a = apri_file_csv(nom_file)
            dati.append(a[0])
            labels_dati.append(a[1])
            continua = input(bcolors.HEADER + "Vuoi inserire altri files? [Sì - premi 's']  [No - premi 'n']" +
                             bcolors.ENDC + "\n")
            if continua == 's':
                pass
            else:
                flag_inserisci_file = 1
    confronta_tempi(dati)
    # Loop principale
    while True:
        confrontaSerieMultiple(dati, labels_dati)


if __name__ == "__main__":
    versione("0.1.0", "02/01/2022")
    print("_" * 110)
    print(Back.WHITE + Fore.BLACK + "\n"    
            "#####                                                         ##### \n"
            "#     # #####  ######   ##   #####  ####  #####  ######       #     # #####    ##   ###### #  ####  # \n"
            "#       #    # #       #  #    #   #    # #    # #            #       #    #  #  #  #      # #    # # \n"
            "#       #    # #####  #    #   #   #    # #    # #####        #  #### #    # #    # #####  # #      # \n"
            "#       #####  #      ######   #   #    # #####  #            #     # #####  ###### #      # #      # \n"
            "#     # #   #  #      #    #   #   #    # #   #  #            #     # #   #  #    # #      # #    # # \n"
            " #####  #    # ###### #    #   #    ####  #    # ######        #####  #    # #    # #      #  ####  # ")
    print( Style.RESET_ALL + "_" * 110)
    starter(1)
